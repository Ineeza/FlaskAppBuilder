# -*- coding:utf-8 -*-

from sqlalchemy import create_engine, event
from sqlalchemy.orm import scoped_session, sessionmaker
from sqlalchemy.ext.declarative import declarative_base

from classes import app
from webconfig import DATABASE_URI, DB_CONNECT_OPTIONS

db_engine = create_engine(DATABASE_URI, convert_unicode=True, encoding='utf-8', **DB_CONNECT_OPTIONS)
db_session = scoped_session(sessionmaker(autocommit=False, autoflush=True, bind=db_engine))

Model = declarative_base(name='Model')
Model.query = db_session.query_property()

def before_execute(conn, clauseelement, multiparams, params):
    try:
        conn.connection.is_valid
    except:
        db_session.remove()

@app.after_request
def after_cursor_execute(response):
    try:
        db_session.remove()
        return response
    except:
        raise

event.listen(db_engine, 'before_execute', before_execute)
#event.listen(engine, "after_cursor_execute", after_cursor_execute)
